##### Primary configuration settings #####
##########################################
# This configuration file is used to manage the behavior of the Salt Master.
# Values that are commented out but have an empty line after the comment are
# defaults that do not need to be set in the config. If there is no blank line
# after the comment then the value is presented as an example and is not the
# default.

# Per default, the master will automatically include all config files
# from master.d/*.conf (master.d is a directory in the same directory
# as the main master config file).
#default_include: master.d/*.conf
<% if @master_default_include %>
default_include: <%= @master_default_include %>
<% end %>
# The address of the interface to bind to:
#interface: 0.0.0.0
<% if @master_interface %>
interface: <%= @master_interface %>
<% end %>
# Whether the master should listen for IPv6 connections. If this is set to True,
# the interface option must be adjusted, too. (For example: "interface: '::'")
#ipv6: False
<% if @master_ipv6 %>
ipv6: <%= @master_ipv6 %>
<% end %>
# The tcp port used by the publisher:
#publish_port: 4505
<% if @master_publish_port %>
publish_port: '<%= @master_publish_port %>'
<% end %>
# The user under which the salt master will run. Salt will update all
# permissions to allow the specified user to run the master. The exception is
# the job cache, which must be deleted if this user is changed. If the
# modified files cause conflicts, set verify_env to False.
#user: root
<% if @master_user %>
user: <%= @master_user %>
<% end %>
# Max open files
#
# Each minion connecting to the master uses AT LEAST one file descriptor, the
# master subscription connection. If enough minions connect you might start
# seeing on the console (and then salt-master crashes):
#   Too many open files (tcp_listener.cpp:335)
#   Aborted (core dumped)
#
# By default this value will be the one of `ulimit -Hn`, ie, the hard limit for
# max open files.
#
# If you wish to set a different value than the default one, uncomment and
# configure this setting. Remember that this value CANNOT be higher than the
# hard limit. Raising the hard limit depends on your OS and/or distribution,
# a good way to find the limit is to search the internet. For example:
#   raise max open files hard limit debian
#
#max_open_files: 100000
<% if @master_max_open_files %>
max_open_files: <%= @master_max_open_files %>
<% end %>
# The number of worker threads to start. These threads are used to manage
# return calls made from minions to the master. If the master seems to be
# running slowly, increase the number of threads. This setting can not be
# set lower than 3.
#worker_threads: 5
<% if @master_worker_threads %>
worker_threads: <%= @master_worker_threads %>
<% end %>
# The port used by the communication interface. The ret (return) port is the
# interface used for the file server, authentication, job returns, etc.
#ret_port: 4506
<% if @master_ret_port %>
ret_port: '<%= @master_ret_port %>'
<% end %>
# Specify the location of the daemon process ID file:
#pidfile: /var/run/salt-master.pid
<% if @master_pid_file %>
pidfile: <%= @master_pid_file %>
<% end %>
# The root directory prepended to these options: pki_dir, cachedir,
# sock_dir, log_file, autosign_file, autoreject_file, extension_modules,
# key_logfile, pidfile:
#root_dir: /
<% if @master_root_dir %>
root_dir: <%= @master_root_dir %>
<% end %>
# Directory used to store public key data:
#pki_dir: /etc/salt/pki/master
<% if @master_pki_dir %>
pki_dir: <%= @master_pki_dir %>
<% end %>
# Directory to store job and cache data:
# This directory may contain sensitive data and should be protected accordingly.
#
#cachedir: /var/cache/salt/master
<% if @master_cachedir %>
cachedir: <%= @master_cachedir %>
<% end %>
# Directory for custom modules. This directory can contain subdirectories for
# each of Salt's module types such as "runners", "output", "wheel", "modules",
# "states", "returners", etc.
#extension_modules: <no default>
<% if @master_extension_modules %>
extension_modules: <%= @master_extension_modules %>
<% end %>
# Directory for custom modules. This directory can contain subdirectories for
# each of Salt's module types such as "runners", "output", "wheel", "modules",
# "states", "returners", etc.
# Like 'extension_modules' but can take an array of paths
#module_dirs: <no default>
#   - /var/cache/salt/minion/extmods
<% if @master_module_dirs %>
module_dirs: <%= @master_module_dirs %>
<% end %>
# Verify and set permissions on configuration directories at startup:
#verify_env: True
<% if @master_verify_env %>
verify_env: <%= @master_verify_env %>
<% end %>
# Set the number of hours to keep old job information in the job cache:
#keep_jobs: 24
<% if @master_keep_jobs %>
keep_jobs: <%= @master_keep_jobs %>
<% end %>
# Set the default timeout for the salt command and api. The default is 5
# seconds.
#timeout: 5
<% if @master_timeout %>
timeout: <%= @master_timeout %>
<% end %>
# The loop_interval option controls the seconds for the master's maintenance
# process check cycle. This process updates file server backends, cleans the
# job cache and executes the scheduler.
#loop_interval: 60
<% if @master_loop_interval %>
loop_interval: <%= @master_loop_interval %>
<% end %>
# Set the default outputter used by the salt command. The default is "nested".
#output: nested
<% if @master_output %>
output: <%= @master_output %>
<% end %>
# Return minions that timeout when running commands like test.ping
#show_timeout: True
<% if @master_show_timeout %>
show_timeout: <%= @master_show_timeout %>
<% end %>
# By default, output is colored. To disable colored output, set the color value
# to False.
#color: True
<% if @master_color %>
color: <%= @master_color %>
<% end %>
# Do not strip off the colored output from nested results and state outputs
# (true by default).
# strip_colors: False
<% if @master_strip_colors %>
strip_colors: <%= @master_strip_colors %>
<% end %>
# Set the directory used to hold unix sockets:
#sock_dir: /var/run/salt/master
<% if @master_sock_dir %>
sock_dir: <%= @master_sock_dir %>
<% end %>
# The master can take a while to start up when lspci and/or dmidecode is used
# to populate the grains for the master. Enable if you want to see GPU hardware
# data for your master.
# enable_gpu_grains: False
<% if @master_enable_gpu_grains %>
enable_gpu_grains: <%= @master_enable_gpu_grains %>
<% end %>
# The master maintains a job cache. While this is a great addition, it can be
# a burden on the master for larger deployments (over 5000 minions).
# Disabling the job cache will make previously executed jobs unavailable to
# the jobs system and is not generally recommended.
#job_cache: True
<% if @master_job_cache %>
job_cache: <%= @master_job_cache %>
<% end %>
# Cache minion grains and pillar data in the cachedir.
#minion_data_cache: True
<% if @master_minion_data_cache %>
minion_data_cache: <%= @master_minion_data_cache %>
<% end %>
# Store all returns in the given returner.
# Setting this option requires that any returner-specific configuration also
# be set. See various returners in salt/returners for details on required
# configuration values. (See also, event_return_queue below.)
#
#event_return: mysql
<% if @master_event_return %>
event_return: '<%= @master_event_return %>'
<% end %>
# On busy systems, enabling event_returns can cause a considerable load on
# the storage system for returners. Events can be queued on the master and
# stored in a batched fashion using a single transaction for multiple events.
# By default, events are not queued.
#event_return_queue: 0
<% if @master_event_return_queue %>
event_return_queue: <%= @master_event_return_queue %>
<% end %>
# Only events returns matching tags in a whitelist
# event_return_whitelist:
#   - salt/master/a_tag
#   - salt/master/another_tag
<% if @master_event_return_whitelist %>
event_return_whitelist: <%= @master_event_return_whitelist %>
<% end %>
# Store all event returns _except_ the tags in a blacklist
# event_return_blacklist:
#   - salt/master/not_this_tag
#   - salt/master/or_this_one
<% if @master_event_return_blacklist %>
event_return_blacklist: <%= @master_event_return_blacklist %>
<% end %>
# Passing very large events can cause the minion to consume large amounts of
# memory. This value tunes the maximum size of a message allowed onto the
# master event bus. The value is expressed in bytes.
#max_event_size: 1048576
<% if @master_max_event_size %>
max_event_size: <%= @master_max_event_size %>
<% end %>
# By default, the master AES key rotates every 24 hours. The next command
# following a key rotation will trigger a key refresh from the minion which may
# result in minions which do not respond to the first command after a key refresh.
#
# To tell the master to ping all minions immediately after an AES key refresh, set
# ping_on_rotate to True. This should mitigate the issue where a minion does not
# appear to initially respond after a key is rotated.
#
# Note that ping_on_rotate may cause high load on the master immediately after
# the key rotation event as minions reconnect. Consider this carefully if this
# salt master is managing a large number of minions.
#
# If disabled, it is recommended to handle this event by listening for the
# 'aes_key_rotate' event with the 'key' tag and acting appropriately.
# ping_on_rotate: False
<% if @master_ping_on_rotate %>
ping_on_rotate: <%= @master_ping_on_rotate %>
<% end %>
# By default, the master deletes its cache of minion data when the key for that
# minion is removed. To preserve the cache after key deletion, set
# 'preserve_minion_cache' to True.
#
# WARNING: This may have security implications if compromised minions auth with
# a previous deleted minion ID.
#preserve_minion_cache: False
<% if @master_preserve_minion_cache %>
preserve_minion_cache: <%= @master_preserve_minion_cache %>
<% end %>
# If max_minions is used in large installations, the master might experience
# high-load situations because of having to check the number of connected
# minions for every authentication. This cache provides the minion-ids of
# all connected minions to all MWorker-processes and greatly improves the
# performance of max_minions.
# con_cache: False
<% if @master_con_cache %>
con_cache: <%= @master_con_cache %>
<% end %>
# The master can include configuration from other files. To enable this,
# pass a list of paths to this option. The paths can be either relative or
# absolute; if relative, they are considered to be relative to the directory
# the main master configuration file lives in (this file). Paths can make use
# of shell-style globbing. If no files are matched by a path passed to this
# option, then the master will log a warning message.
#
# Include a config file from some other path:
# include: /etc/salt/extra_config
#
# Include config from several files and directories:
# include:
#   - /etc/salt/extra_config
<% if @master_include %>
include: <%= @master_include %>
<% end %>
#####        Security settings       #####
##########################################
# Enable "open mode", this mode still maintains encryption, but turns off
# authentication, this is only intended for highly secure environments or for
# the situation where your keys end up in a bad state. If you run in open mode
# you do so at your own risk!
#open_mode: False
<% if @master_open_mode %>
open_mode: <%= @master_open_mode %>
<% end %>
# Enable auto_accept, this setting will automatically accept all incoming
# public keys from the minions. Note that this is insecure.
#auto_accept: False
<% if @master_auto_accept %>
auto_accept: <%= @master_auto_accept %>
<% end %>
# Time in minutes that a incoming public key with a matching name found in
# pki_dir/minion_autosign/keyid is automatically accepted. Expired autosign keys
# are removed when the master checks the minion_autosign directory.
# 0 equals no timeout
# autosign_timeout: 120
<% if @master_autosign_timeout %>
autosign_timeout: <%= @master_autosign_timeout %>
<% end %>
# If the autosign_file is specified, incoming keys specified in the
# autosign_file will be automatically accepted. This is insecure.  Regular
# expressions as well as globing lines are supported.
#autosign_file: /etc/salt/autosign.conf
<% if @master_autosign_file %>
autosign_file: <%= @master_autosign_file %>
<% end %>
# Works like autosign_file, but instead allows you to specify minion IDs for
# which keys will automatically be rejected. Will override both membership in
# the autosign_file and the auto_accept setting.
#autoreject_file: /etc/salt/autoreject.conf
<% if @master_autoreject_file %>
autoreject_file: <%= @master_autoreject_file %>
<% end %>
# Enable permissive access to the salt keys. This allows you to run the
# master or minion as root, but have a non-root group be given access to
# your pki_dir. To make the access explicit, root must belong to the group
# you've given access to. This is potentially quite insecure. If an autosign_file
# is specified, enabling permissive_pki_access will allow group access to that
# specific file.
#permissive_pki_access: False
<% if @master_permissive_pki_access %>
permissive_pki_access: <%= @master_permissive_pki_access %>
<% end %>
# Allow users on the master access to execute specific commands on minions.
# This setting should be treated with care since it opens up execution
# capabilities to non root users. By default this capability is completely
# disabled.
#client_acl:
#  larry:
#    - test.ping
#    - network.*
#
<% if @master_client_acl %>
client_acl: <%= @master_client_acl %>
<% end %>
# Blacklist any of the following users or modules
#
# This example would blacklist all non sudo users, including root from
# running any commands. It would also blacklist any use of the "cmd"
# module. This is completely disabled by default.
#
#client_acl_blacklist:
#  users:
#    - root
#    - '^(?!sudo_).*$'   #  all non sudo users
#  modules:
#    - cmd
<% if @master_client_acl_blacklist %>
client_acl_blacklist: <%= @master_client_acl_blacklist %>
<% end %>
# Enforce client_acl & client_acl_blacklist when users have sudo
# access to the salt command.
#
#sudo_acl: False
<% if @master_sudo_acl %>
sudo_acl: <%= @master_sudo_acl %>
<% end %>
# The external auth system uses the Salt auth modules to authenticate and
# validate users to access areas of the Salt system.
#external_auth:
#  pam:
#    fred:
#      - test.*
#
<% if @master_external_auth %>
external_auth: <%= @master_external_auth %>
<% end %>
# Time (in seconds) for a newly generated token to live. Default: 12 hours
#token_expire: 43200
<% if @master_token_expire %>
token_expire: <%= @master_token_expire %>
<% end %>
# Allow minions to push files to the master. This is disabled by default, for
# security purposes.
#file_recv: False
<% if @master_file_recv %>
file_recv: <%= @master_file_recv %>
<% end %>
# Set a hard-limit on the size of the files that can be pushed to the master.
# It will be interpreted as megabytes. Default: 100
#file_recv_max_size: 100
<% if @master_file_recv_max_size %>
file_recv_max_size: <%= @master_file_recv_max_size %>
<% end %>
# Signature verification on messages published from the master.
# This causes the master to cryptographically sign all messages published to its event
# bus, and minions then verify that signature before acting on the message.
#
# This is False by default.
#
# Note that to facilitate interoperability with masters and minions that are different
# versions, if sign_pub_messages is True but a message is received by a minion with
# no signature, it will still be accepted, and a warning message will be logged.
# Conversely, if sign_pub_messages is False, but a minion receives a signed
# message it will be accepted, the signature will not be checked, and a warning message
# will be logged. This behavior went away in Salt 2014.1.0 and these two situations
# will cause minion to throw an exception and drop the message.
# sign_pub_messages: False
<% if @master_sign_pub_messages %>
sign_pub_messages: <%= @master_sign_pub_messages %>
<% end %>
#####     Salt-SSH Configuration     #####
##########################################

# Pass in an alternative location for the salt-ssh roster file
#roster_file: /etc/salt/roster
<% if @master_roster_file %>
roster_file: '<%= @master_roster_file %>'
<% end %>
# Pass in minion option overrides that will be inserted into the SHIM for
# salt-ssh calls. The local minion config is not used for salt-ssh. Can be
# overridden on a per-minion basis in the roster (`minion_opts`)
#ssh_minion_opts:
#  gpg_keydir: /root/gpg
<% if @master_ssh_minion_opts %>
ssh_minion_opts: <%= @master_ssh_minion_opts %>
<% end %>
#####    Master Module Management    #####
##########################################
# Manage how master side modules are loaded.

# Add any additional locations to look for master runners:
#runner_dirs: []
<% if @master_runner_dirs %>
runner_dirs: <%= @master_runner_dirs %>
<% end %>
# Enable Cython for master side modules:
#cython_enable: False
<% if @master_cython_enable %>
cython_enable: <%= @master_cython_enable %>
<% end %>
#####      State System settings     #####
##########################################
# The state system uses a "top" file to tell the minions what environment to
# use and what modules to use. The state_top file is defined relative to the
# root of the base environment as defined in "File Server settings" below.
#state_top: top.sls
<% if @master_state_top %>
state_top: <%= @master_state_top %>
<% end %>
# The master_tops option replaces the external_nodes option by creating
# a plugable system for the generation of external top data. The external_nodes
# option is deprecated by the master_tops option.
#
# To gain the capabilities of the classic external_nodes system, use the
# following configuration:
# master_tops:
#   ext_nodes: <Shell command which returns yaml>
#
#master_tops: {}
<% if @master_master_tops %>
master_tops: <%= @master_master_tops %>
<% end %>
# The external_nodes option allows Salt to gather data that would normally be
# placed in a top file. The external_nodes option is the executable that will
# return the ENC data. Remember that Salt will look for external nodes AND top
# files and combine the results if both are enabled!
#external_nodes: None
<% if @master_external_nodes %>
external_nodes: <%= @master_external_nodes %>
<% end %>
# The renderer to use on the minions to render the state data
#renderer: yaml_jinja
<% if @master_renderer %>
renderer: <%= @master_renderer %>
<% end %>
# The Jinja renderer can strip extra carriage returns and whitespace
# See http://jinja.pocoo.org/docs/api/#high-level-api
#
# If this is set to True the first newline after a Jinja block is removed
# (block, not variable tag!). Defaults to False, corresponds to the Jinja
# environment init variable "trim_blocks".
#jinja_trim_blocks: False
#
<% if @master_jinja_trim_blocks %>
jinja_trim_blocks: <%= @master_jinja_trim_blocks %>
<% end %>
# If this is set to True leading spaces and tabs are stripped from the start
# of a line to a block. Defaults to False, corresponds to the Jinja
# environment init variable "lstrip_blocks".
#jinja_lstrip_blocks: False
<% if @master_jinja_lstrip_blocks %>
jinja_lstrip_blocks: <%= @master_jinja_lstrip_blocks %>
<% end %>
# The failhard option tells the minions to stop immediately after the first
# failure detected in the state execution, defaults to False
#failhard: False
<% if @master_failhard %>
failhard: <%= @master_failhard %>
<% end %>
# The state_verbose and state_output settings can be used to change the way
# state system data is printed to the display. By default all data is printed.
# The state_verbose setting can be set to True or False, when set to False
# all data that has a result of True and no changes will be suppressed.
#state_verbose: True
<% if @master_state_verbose %>
state_verbose: <%= @master_state_verbose %>
<% end %>
# The state_output setting changes if the output is the full multi line
# output for each changed state if set to 'full', but if set to 'terse'
# the output will be shortened to a single line.  If set to 'mixed', the output
# will be terse unless a state failed, in which case that output will be full.
# If set to 'changes', the output will be full unless the state didn't change.
#state_output: full
<% if @master_state_output %>
state_output: <%= @master_state_output %>
<% end %>
# Automatically aggregate all states that have support for mod_aggregate by
# setting to 'True'. Or pass a list of state module names to automatically
# aggregate just those types.
#
# state_aggregate:
#   - pkg
#
#state_aggregate: False
<% if @master_state_aggregate %>
state_aggregate: <%= @master_state_aggregate %>
<% end %>
# Send progress events as each function in a state run completes execution
# by setting to 'True'. Progress events are in the format
# 'salt/job/<JID>/prog/<MID>/<RUN NUM>'.
#state_events: False
<% if @master_state_events %>
state_events: <%= @master_state_events %>
<% end %>
#####      File Server settings      #####
##########################################
# Salt runs a lightweight file server written in zeromq to deliver files to
# minions. This file server is built into the master daemon and does not
# require a dedicated port.

# The file server works on environments passed to the master, each environment
# can have multiple root directories, the subdirectories in the multiple file
# roots cannot match, otherwise the downloaded files will not be able to be
# reliably ensured. A base environment is required to house the top file.
# Example:
# file_roots:
#   base:
#     - /srv/salt/
#   dev:
#     - /srv/salt/dev/services
#     - /srv/salt/dev/states
#   prod:
#     - /srv/salt/prod/services
#     - /srv/salt/prod/states
#
#file_roots:
#  base:
#    - /srv/salt
#
<% if @master_file_roots %>
file_roots: <%= @master_file_roots %>
<% end %>
# When using multiple environments, each with their own top file, the
# default behaviour is an unordered merge. To prevent top files from
# being merged together and instead to only use the top file from the
# requested environment, set this value to 'same'.
#top_file_merging_strategy: merge
<% if @master_top_file_merging_strategy %>
top_file_merging_strategy: <%= @master_top_file_merging_strategy %>
<% end %>
# To specify the order in which environments are merged, set the ordering
# in the env_order option. Given a conflict, the last matching value will
# win.
#env_order: ['base', 'dev', 'prod']
<% if @master_env_order %>
env_order: <%= @master_env_order %>
<% end %>
# If top_file_merging_strategy is set to 'same' and an environment does not
# contain a top file, the top file in the environment specified by default_top
# will be used instead.
#default_top: base
<% if @master_default_top %>
default_top: <%= @master_default_top %>
<% end %>
# The hash_type is the hash to use when discovering the hash of a file on
# the master server. The default is md5, but sha1, sha224, sha256, sha384
# and sha512 are also supported.
#
# Prior to changing this value, the master should be stopped and all Salt
# caches should be cleared.
#hash_type: md5
<% if @master_hash_type %>
hash_type: <%= @master_hash_type %>
<% end %>
# The buffer size in the file server can be adjusted here:
#file_buffer_size: 1048576
<% if @master_file_buffer_size %>
file_buffer_size: <%= @master_file_buffer_size %>
<% end %>
# A regular expression (or a list of expressions) that will be matched
# against the file path before syncing the modules and states to the minions.
# This includes files affected by the file.recurse state.
# For example, if you manage your custom modules and states in subversion
# and don't want all the '.svn' folders and content synced to your minions,
# you could set this to '/\.svn($|/)'. By default nothing is ignored.
#file_ignore_regex:
#  - '/\.svn($|/)'
#  - '/\.git($|/)'
<% if @master_file_ignore_regex %>
file_ignore_regex: <%= @master_file_ignore_regex %>
<% end %>
# A file glob (or list of file globs) that will be matched against the file
# path before syncing the modules and states to the minions. This is similar
# to file_ignore_regex above, but works on globs instead of regex. By default
# nothing is ignored.
# file_ignore_glob:
#  - '*.pyc'
#  - '*/somefolder/*.bak'
#  - '*.swp'
<% if @master_file_ignore_glob %>
file_ignore_glob: <%= @master_file_ignore_glob %>
<% end %>
# File Server Backend
#
# Salt supports a modular fileserver backend system, this system allows
# the salt master to link directly to third party systems to gather and
# manage the files available to minions. Multiple backends can be
# configured and will be searched for the requested file in the order in which
# they are defined here. The default setting only enables the standard backend
# "roots" which uses the "file_roots" option.
#fileserver_backend:
#  - roots
#
# To use multiple backends list them in the order they are searched:
#fileserver_backend:
#  - git
#  - roots
#
<% if @master_fileserver_backend %>
fileserver_backend: <%= @master_fileserver_backend %>
<% end %>
# Uncomment the line below if you do not want the file_server to follow
# symlinks when walking the filesystem tree. This is set to True
# by default. Currently this only applies to the default roots
# fileserver_backend.
#fileserver_followsymlinks: False
#
<% if @master_fileserver_followsymlinks %>
fileserver_followsymlinks: <%= @master_fileserver_followsymlinks %>
<% end %>
# Uncomment the line below if you do not want symlinks to be
# treated as the files they are pointing to. By default this is set to
# False. By uncommenting the line below, any detected symlink while listing
# files on the Master will not be returned to the Minion.
#fileserver_ignoresymlinks: True
#
<% if @master_fileserver_ignoresymlinks %>
fileserver_ignoresymlinks: <%= @master_fileserver_ignoresymlinks %>
<% end %>
# By default, the Salt fileserver recurses fully into all defined environments
# to attempt to find files. To limit this behavior so that the fileserver only
# traverses directories with SLS files and special Salt directories like _modules,
# enable the option below. This might be useful for installations where a file root
# has a very large number of files and performance is impacted. Default is False.
# fileserver_limit_traversal: False
#
<% if @master_fileserver_limit_traversal %>
fileserver_limit_traversal: <%= @master_fileserver_limit_traversal %>
<% end %>
# The fileserver can fire events off every time the fileserver is updated,
# these are disabled by default, but can be easily turned on by setting this
# flag to True
#fileserver_events: False
<% if @master_fileserver_events %>
fileserver_events: <%= @master_fileserver_events %>
<% end %>
# Git File Server Backend Configuration
#
# Gitfs can be provided by one of two python modules: GitPython or pygit2. If
# using pygit2, both libgit2 and git must also be installed.
#gitfs_provider: gitpython
#
<% if @master_gitfs_provider %>
gitfs_provider: <%= @master_gitfs_provider %>
<% end %>
# When using the git fileserver backend at least one git remote needs to be
# defined. The user running the salt master will need read access to the repo.
#
# The repos will be searched in order to find the file requested by a client
# and the first repo to have the file will return it.
# When using the git backend branches and tags are translated into salt
# environments.
# Note:  file:// repos will be treated as a remote, so refs you want used must
# exist in that repo as *local* refs.
#gitfs_remotes:
#  - git://github.com/saltstack/salt-states.git
#  - file:///var/git/saltmaster
#
<% if @master_gitfs_remotes %>
gitfs_remotes: <%= @master_gitfs_remotes %>
<% end %>
# The gitfs_ssl_verify option specifies whether to ignore ssl certificate
# errors when contacting the gitfs backend. You might want to set this to
# false if you're using a git backend that uses a self-signed certificate but
# keep in mind that setting this flag to anything other than the default of True
# is a security concern, you may want to try using the ssh transport.
#gitfs_ssl_verify: True
#
<% if @master_gitfs_ssl_verify %>
gitfs_ssl_verify: <%= @master_gitfs_ssl_verify %>
<% end %>
# The gitfs_root option gives the ability to serve files from a subdirectory
# within the repository. The path is defined relative to the root of the
# repository and defaults to the repository root.
#gitfs_root: somefolder/otherfolder
#
#
<% if @master_gitfs_root %>
gitfs_root: '<%= @master_gitfs_root %>'
<% end %>
#####         Pillar settings        #####
##########################################
# Salt Pillars allow for the building of global data that can be made selectively
# available to different minions based on minion grain filtering. The Salt
# Pillar is laid out in the same fashion as the file server, with environments,
# a top file and sls files. However, pillar data does not need to be in the
# highstate format, and is generally just key/value pairs.
#pillar_roots:
#  base:
#    - /srv/pillar
#
<% if @master_pillar_roots %>
pillar_roots: <%= @master_pillar_roots %>
<% end %>
#ext_pillar:
#  - hiera: /etc/hiera.yaml
#  - cmd_yaml: cat /etc/salt/yaml
<% if @master_ext_pillar %>
ext_pillar: <%= @master_ext_pillar %>
<% end %>
# The ext_pillar_first option allows for external pillar sources to populate
# before file system pillar. This allows for targeting file system pillar from
# ext_pillar.
#ext_pillar_first: False
<% if @master_ext_pillar_first %>
ext_pillar_first: <%= @master_ext_pillar_first %>
<% end %>
# The pillar_gitfs_ssl_verify option specifies whether to ignore ssl certificate
# errors when contacting the pillar gitfs backend. You might want to set this to
# false if you're using a git backend that uses a self-signed certificate but
# keep in mind that setting this flag to anything other than the default of True
# is a security concern, you may want to try using the ssh transport.
#pillar_gitfs_ssl_verify: True
<% if @master_pillar_gitfs_ssl_verify %>
pillar_gitfs_ssl_verify: <%= @master_pillar_gitfs_ssl_verify %>
<% end %>
# The pillar_opts option adds the master configuration file data to a dict in
# the pillar called "master". This is used to set simple configurations in the
# master config file that can then be used on minions.
#pillar_opts: False
<% if @master_pillar_opts %>
pillar_opts: <%= @master_pillar_opts %>
<% end %>
# The pillar_safe_render_error option prevents the master from passing pillar
# render errors to the minion. This is set on by default because the error could
# contain templating data which would give that minion information it shouldn't
# have, like a password! When set true the error message will only show:
#   Rendering SLS 'my.sls' failed. Please see master log for details.
#pillar_safe_render_error: True
<% if @master_pillar_safe_render_error %>
pillar_safe_render_error: <%= @master_pillar_safe_render_error %>
<% end %>
# The pillar_source_merging_strategy option allows you to configure merging strategy
# between different sources. It accepts four values: recurse, aggregate, overwrite,
# or smart. Recurse will merge recursively mapping of data. Aggregate instructs
# aggregation of elements between sources that use the #!yamlex renderer. Overwrite
# will verwrite elements according the order in which they are processed. This is
# behavior of the 2014.1 branch and earlier. Smart guesses the best strategy based
# on the "renderer" setting and is the default value.
#pillar_source_merging_strategy: smart
<% if @master_pillar_source_merging_strategy %>
pillar_source_merging_strategy: <%= @master_pillar_source_merging_strategy %>
<% end %>
#####          Syndic settings       #####
##########################################
# The Salt syndic is used to pass commands through a master from a higher
# master. Using the syndic is simple. If this is a master that will have
# syndic servers(s) below it, then set the "order_masters" setting to True.
#
# If this is a master that will be running a syndic daemon for passthrough, then
# the "syndic_master" setting needs to be set to the location of the master server
# to receive commands from.

# Set the order_masters setting to True if this master will command lower
# masters' syndic interfaces.
#order_masters: False
<% if @master_order_masters %>
order_masters: <%= @master_order_masters %>
<% end %>
# If this master will be running a salt syndic daemon, syndic_master tells
# this master where to receive commands from.
#syndic_master: masterofmaster
<% if @master_syndic_master %>
syndic_master: '<%= @master_syndic_master %>'
<% end %>
# This is the 'ret_port' of the MasterOfMaster:
#syndic_master_port: 4506
<% if @master_syndic_master_port %>
syndic_master_port: '<%= @master_syndic_master_port %>'
<% end %>
# PID file of the syndic daemon:
#syndic_pidfile: /var/run/salt-syndic.pid
<% if @master_syndic_pidfile %>
syndic_pidfile: '<%= @master_syndic_pidfile %>'
<% end %>
# LOG file of the syndic daemon:
#syndic_log_file: syndic.log
<% if @master_syndic_log_file %>
syndic_log_file: '<%= @master_syndic_log_file %>'
<% end %>
#####      Peer Publish settings     #####
##########################################
# Salt minions can send commands to other minions, but only if the minion is
# allowed to. By default "Peer Publication" is disabled, and when enabled it
# is enabled for specific minions and specific commands. This allows secure
# compartmentalization of commands based on individual minions.

# The configuration uses regular expressions to match minions and then a list
# of regular expressions to match functions. The following will allow the
# minion authenticated as foo.example.com to execute functions from the test
# and pkg modules.
#peer:
#  foo.example.com:
#    - test.*
#    - pkg.*
#
# This will allow all minions to execute all commands:
#peer:
#  .*:
#    - .*
#
# This is not recommended, since it would allow anyone who gets root on any
# single minion to instantly have root on all of the minions!
<% if @master_peer %>
peer: <%= @master_peer %>
<% end %>
# Minions can also be allowed to execute runners from the salt master.
# Since executing a runner from the minion could be considered a security risk,
# it needs to be enabled. This setting functions just like the peer setting
# except that it opens up runners instead of module functions.
#
# All peer runner support is turned off by default and must be enabled before
# using. This will enable all peer runners for all minions:
#peer_run:
#  .*:
#    - .*
#
# To enable just the manage.up runner for the minion foo.example.com:
#peer_run:
#  foo.example.com:
#    - manage.up
#
#
<% if @master_peer_run %>
peer_run: <%= @master_peer_run %>
<% end %>
#####         Mine settings     #####
#####################################
# Restrict mine.get access from minions. By default any minion has a full access
# to get all mine data from master cache. In acl definion below, only pcre matches
# are allowed.
# mine_get:
#   .*:
#     - .*
#
# The example below enables minion foo.example.com to get 'network.interfaces' mine
# data only, minions web* to get all network.* and disk.* mine data and all other
# minions won't get any mine data.
# mine_get:
#   foo.example.com:
#     - network.interfaces
#   web.*:
#     - network.*
#     - disk.*
<% if @master_mine_get %>
mine_get: <%= @master_mine_get %>
<% end %>
#####         Logging settings       #####
##########################################
# The location of the master log file
# The master log can be sent to a regular file, local path name, or network
# location. Remote logging works best when configured to use rsyslogd(8) (e.g.:
# ``file:///dev/log``), with rsyslogd(8) configured for network logging. The URI
# format is: <file|udp|tcp>://<host|socketpath>:<port-if-required>/<log-facility>
#log_file: /var/log/salt/master
#log_file: file:///dev/log
#log_file: udp://loghost:10514

#log_file: /var/log/salt/master
#key_logfile: /var/log/salt/key
<% if @master_log_file %>
log_file: <%= @master_log_file %>
<% end %>
<% if @master_key_logfile %>
key_logfile: <%= @master_key_logfile %>
<% end %>
# The level of messages to send to the console.
# One of 'garbage', 'trace', 'debug', info', 'warning', 'error', 'critical'.
#
# The following log levels are considered INSECURE and may log sensitive data:
# ['garbage', 'trace', 'debug']
#
#log_level: warning
<% if @master_log_level %>
log_level: <%= @master_log_level %>
<% end %>
# The level of messages to send to the log file.
# One of 'garbage', 'trace', 'debug', info', 'warning', 'error', 'critical'.
# If using 'log_granular_levels' this must be set to the highest desired level.
#log_level_logfile: warning
<% if @master_log_level_logfile %>
log_level_logfile: <%= @master_log_level_logfile %>
<% end %>
# The date and time format used in log messages. Allowed date/time formating
# can be seen here: http://docs.python.org/library/time.html#time.strftime
#log_datefmt: '%H:%M:%S'
#log_datefmt_logfile: '%Y-%m-%d %H:%M:%S'
<% if @master_log_datefmt %>
log_datefmt: '<%= @master_log_datefmt %>'
<% end %>
<% if @master_log_datefmt_logfile %>
log_datefmt_logfile: '<%= @master_log_datefmt_logfile %>'
<% end %>
# The format of the console logging messages. Allowed formatting options can
# be seen here: http://docs.python.org/library/logging.html#logrecord-attributes
#
# Console log colors are specified by these additional formatters:
#
# %(colorlevel)s
# %(colorname)s
# %(colorprocess)s
# %(colormsg)s
#
# Since it is desirable to include the surrounding brackets, '[' and ']', in
# the coloring of the messages, these color formatters also include padding as
# well.  Color LogRecord attributes are only available for console logging.
#
#log_fmt_console: '%(colorlevel)s %(colormsg)s'
#log_fmt_console: '[%(levelname)-8s] %(message)s'
#
#log_fmt_logfile: '%(asctime)s,%(msecs)03.0f [%(name)-17s][%(levelname)-8s] %(message)s'
<% if @master_log_fmt_logfile %>
log_fmt_logfile: '<%= @master_log_fmt_logfile %>'
<% end %>
# This can be used to control logging levels more specificically.  This
# example sets the main salt library at the 'warning' level, but sets
# 'salt.modules' to log at the 'debug' level:
#   log_granular_levels:
#     'salt': 'warning'
#     'salt.modules': 'debug'
#
#log_granular_levels: {}
<% if @master_log_granular_levels %>
log_granular_levels: <%= @master_log_granular_levels %>
<% end %>
#####         Node Groups           ######
##########################################
# Node groups allow for logical groupings of minion nodes. A group consists of a group
# name and a compound target.
#nodegroups:
#  group1: 'L@foo.domain.com,bar.domain.com,baz.domain.com and bl*.domain.com'
#  group2: 'G@os:Debian and foo.domain.com'
<% if @master_nodegroups %>
nodegroups: <%= @master_nodegroups %>
<% end %>
#####     Range Cluster settings     #####
##########################################
# The range server (and optional port) that serves your cluster information
# https://github.com/ytoolshed/range/wiki/%22yamlfile%22-module-file-spec
#
#range_server: range:80
<% if @master_range_server %>
range_server: <%= @master_range_server %>
<% end %>
#####  Windows Software Repo settings #####
###########################################
# Location of the repo on the master:
#winrepo_dir_ng: '/srv/salt/win/repo-ng'
#
<% if @master_winrepo_dir_ng %>
winrepo_dir_ng: <%= @master_winrepo_dir_ng %>
<% end %>
# List of git repositories to include with the local repo:
#winrepo_remotes_ng:
#  - 'https://github.com/saltstack/salt-winrepo-ng.git'
<% if @master_winrepo_remotes_ng %>
winrepo_remotes_ng: <%= @master_winrepo_remotes_ng %>
<% end %>
#####  Windows Software Repo settings - Pre 2015.8 #####
########################################################
# Legacy repo settings for pre-2015.8 Windows minions.
#
# Location of the repo on the master:
#winrepo_dir: '/srv/salt/win/repo'
#
<% if @master_winrepo_dir %>
winrepo_dir: <%= @master_winrepo_dir %>
<% end %>
# Location of the master's repo cache file:
#winrepo_mastercachefile: '/srv/salt/win/repo/winrepo.p'
#
<% if @master_winrepo_mastercachefile %>
winrepo_mastercachefile: <%= @master_winrepo_mastercachefile %>
<% end %>
# List of git repositories to include with the local repo:
#winrepo_remotes:
#  - 'https://github.com/saltstack/salt-winrepo.git'
<% if @master_winrepo_remotes %>
winrepo_remotes: <%= @master_winrepo_remotes %>
<% end %>
#####      Returner settings          ######
############################################
# Which returner(s) will be used for minion's result:
#return: mysql
<% if @master_return %>
return: <%= @master_return %>
<% end %>
