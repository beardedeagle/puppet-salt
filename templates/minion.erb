##### Primary configuration settings #####
##########################################
# This configuration file is used to manage the behavior of the Salt Minion.
# With the exception of the location of the Salt Master Server, values that are
# commented out but have an empty line after the comment are defaults that need
# not be set in the config. If there is no blank line after the comment, the
# value is presented as an example and is not the default.

# Per default the minion will automatically include all config files
# from minion.d/*.conf (minion.d is a directory in the same directory
# as the main minion config file).
#default_include: minion.d/*.conf
<% if @minion_default_include %>
default_include: <%= @minion_default_include %>
<% end %>

# Set the location of the salt master server. If the master server cannot be
# resolved, then the minion will fail to start.
#master: salt
<% if @minion_master %>
master: <%= @minion_master %>
<% end %>

# If multiple masters are specified in the 'master' setting, the default behavior
# is to always try to connect to them in the order they are listed. If random_master is
# set to True, the order will be randomized instead. This can be helpful in distributing
# the load of many minions executing salt-call requests, for example, from a cron job.
# If only one master is listed, this setting is ignored and a warning will be logged.
#random_master: False
<% if @minion_random_master %>
random_master: <%= @minion_random_master %>
<% end %>

# Minions can connect to multiple masters simultaneously (all masters
# are "hot"), or can be configured to failover if a master becomes
# unavailable.  Multiple hot masters are configured by setting this
# value to "str".  Failover masters can be requested by setting
# to "failover".  MAKE SURE TO SET master_alive_interval if you are
# using failover.
# master_type: str
<% if @minion_master_type %>
master_type: <%= @minion_master_type %>
<% end %>

# Poll interval in seconds for checking if the master is still there.  Only
# respected if master_type above is "failover". To disable the interval entirely,
# set the value to -1. (This may be necessary on machines which have high numbers
# of TCP connections, such as load balancers.)
# master_alive_interval: 30
<% if @minion_master_alive_interval %>
master_alive_interval: <%= @minion_master_alive_interval %>
<% end %>

# Set whether the minion should connect to the master via IPv6:
#ipv6: False
<% if @minion_ipv6 %>
ipv6: <%= @minion_ipv6 %>
<% end %>

# Set the number of seconds to wait before attempting to resolve
# the master hostname if name resolution fails. Defaults to 30 seconds.
# Set to zero if the minion should shutdown and not retry.
# retry_dns: 30
<% if @minion_retry_dns %>
retry_dns: <%= @minion_retry_dns %>
<% end %>

# Set the port used by the master reply and authentication server.
#master_port: 4506
<% if @minion_master_port %>
master_port: '<%= @minion_master_port %>'
<% end %>

# The user to run salt.
#user: root
<% if @minion_user %>
user: <%= @minion_user %>
<% end %>

# Setting sudo_user will cause salt to run all execution modules under an sudo
# to the user given in sudo_user.  The user under which the salt minion process
# itself runs will still be that provided in the user config above, but all
# execution modules run by the minion will be rerouted through sudo.
#sudo_user: saltdev
<% if @minion_sudo_user %>
sudo_user: '<%= @minion_sudo_user %>'
<% end %>

# Specify the location of the daemon process ID file.
#pidfile: /var/run/salt-minion.pid
<% if @minion_pidfile %>
pidfile: <%= @minion_pidfile %>
<% end %>

# The root directory prepended to these options: pki_dir, cachedir, log_file,
# sock_dir, pidfile.
#root_dir: /
<% if @minion_root_dir %>
root_dir: <%= @minion_root_dir %>
<% end %>

# The directory to store the pki information in
#pki_dir: /etc/salt/pki/minion
<% if @minion_pki_dir %>
pki_dir: <%= @minion_pki_dir %>
<% end %>

# Explicitly declare the id for this minion to use, if left commented the id
# will be the hostname as returned by the python call: socket.getfqdn()
# Since salt uses detached ids it is possible to run multiple minions on the
# same machine but with different ids, this can be useful for salt compute
# clusters.
#id:
<% if @minion_id %>
id: <%= @minion_id %>
<% end %>

# Append a domain to a hostname in the event that it does not exist.  This is
# useful for systems where socket.getfqdn() does not actually result in a
# FQDN (for instance, Solaris).
#append_domain:
<% if @minion_append_domain %>
append_domain: <%= @minion_append_domain %>
<% end %>

# Custom static grains for this minion can be specified here and used in SLS
# files just like all other grains. This example sets 4 custom grains, with
# the 'roles' grain having two values that can be matched against.
#grains:
#  roles:
#    - webserver
#    - memcache
#  deployment: datacenter4
#  cabinet: 13
#  cab_u: 14-15
#
# Where cache data goes.
# This data may contain sensitive data and should be protected accordingly.
#cachedir: /var/cache/salt/minion
<% if @minion_cachedir %>
cachedir: <%= @minion_cachedir %>
<% end %>

# Verify and set permissions on configuration directories at startup.
#verify_env: True
<% if @minion_verify_env %>
verify_env: <%= @minion_verify_env %>
<% end %>

# The minion can locally cache the return data from jobs sent to it, this
# can be a good way to keep track of jobs the minion has executed
# (on the minion side). By default this feature is disabled, to enable, set
# cache_jobs to True.
#cache_jobs: False
<% if @minion_cache_jobs %>
cache_jobs: <%= @minion_cache_jobs %>
<% end %>

# Set the directory used to hold unix sockets.
#sock_dir: /var/run/salt/minion
<% if @minion_sock_dir %>
sock_dir: <%= @minion_sock_dir %>
<% end %>

# Set the default outputter used by the salt-call command. The default is
# "nested".
#output: nested
<% if @minion_output %>
output: <%= @minion_output %>
<% end %>
#
# By default output is colored. To disable colored output, set the color value
# to False.
#color: True
<% if @minion_color %>
color: <%= @minion_color %>
<% end %>

# Do not strip off the colored output from nested results and state outputs
# (true by default).
# strip_colors: False
<% if @minion_strip_colors %>
strip_colors: <%= @minion_strip_colors %>
<% end %>

# Backup files that are replaced by file.managed and file.recurse under
# 'cachedir'/file_backups relative to their original location and appended
# with a timestamp. The only valid setting is "minion". Disabled by default.
#
# Alternatively this can be specified for each file in state files:
# /etc/ssh/sshd_config:
#   file.managed:
#     - source: salt://ssh/sshd_config
#     - backup: minion
#
#backup_mode: minion
<% if @minion_backup_mode %>
backup_mode: <%= @minion_backup_mode %>
<% end %>

# When waiting for a master to accept the minion's public key, salt will
# continuously attempt to reconnect until successful. This is the time, in
# seconds, between those reconnection attempts.
#acceptance_wait_time: 10
<% if @minion_acceptance_wait_time %>
acceptance_wait_time: <%= @minion_acceptance_wait_time %>
<% end %>

# If this is nonzero, the time between reconnection attempts will increase by
# acceptance_wait_time seconds per iteration, up to this maximum. If this is
# set to zero, the time between reconnection attempts will stay constant.
#acceptance_wait_time_max: 0
<% if @minion_acceptance_wait_time_max %>
acceptance_wait_time_max: <%= @minion_acceptance_wait_time_max %>
<% end %>

# If the master rejects the minion's public key, retry instead of exiting.
# Rejected keys will be handled the same as waiting on acceptance.
#rejected_retry: False
<% if @minion_rejected_retry %>
rejected_retry: <%= @minion_rejected_retry %>
<% end %>

# When the master key changes, the minion will try to re-auth itself to receive
# the new master key. In larger environments this can cause a SYN flood on the
# master because all minions try to re-auth immediately. To prevent this and
# have a minion wait for a random amount of time, use this optional parameter.
# The wait-time will be a random number of seconds between 0 and the defined value.
#random_reauth_delay: 60
<% if @minion_random_reauth_delay %>
random_reauth_delay: <%= @minion_random_reauth_delay %>
<% end %>

# When waiting for a master to accept the minion's public key, salt will
# continuously attempt to reconnect until successful. This is the timeout value,
# in seconds, for each individual attempt. After this timeout expires, the minion
# will wait for acceptance_wait_time seconds before trying again. Unless your master
# is under unusually heavy load, this should be left at the default.
#auth_timeout: 60
<% if @minion_auth_timeout %>
auth_timeout: <%= @minion_auth_timeout %>
<% end %>

# Number of consecutive SaltReqTimeoutError that are acceptable when trying to
# authenticate.
#auth_tries: 7
<% if @minion_auth_tries %>
auth_tries: <%= @minion_auth_tries %>
<% end %>

# If authentication fails due to SaltReqTimeoutError during a ping_interval,
# cause sub minion process to restart.
#auth_safemode: False
<% if @minion_auth_safemode %>
auth_safemode: <%= @minion_auth_safemode %>
<% end %>

# Ping Master to ensure connection is alive (minutes).
#ping_interval: 0
<% if @minion_ping_interval %>
ping_interval: <%= @minion_ping_interval %>
<% end %>

# To auto recover minions if master changes IP address (DDNS)
#    auth_tries: 10
#    auth_safemode: False
#    ping_interval: 90
#
# Minions won't know master is missing until a ping fails. After the ping fail,
# the minion will attempt authentication and likely fails out and cause a restart.
# When the minion restarts it will resolve the masters IP and attempt to reconnect.

# If you don't have any problems with syn-floods, don't bother with the
# three recon_* settings described below, just leave the defaults!
#
# The ZeroMQ pull-socket that binds to the masters publishing interface tries
# to reconnect immediately, if the socket is disconnected (for example if
# the master processes are restarted). In large setups this will have all
# minions reconnect immediately which might flood the master (the ZeroMQ-default
# is usually a 100ms delay). To prevent this, these three recon_* settings
# can be used.
# recon_default: the interval in milliseconds that the socket should wait before
#                trying to reconnect to the master (1000ms = 1 second)
#
# recon_max: the maximum time a socket should wait. each interval the time to wait
#            is calculated by doubling the previous time. if recon_max is reached,
#            it starts again at recon_default. Short example:
#
#            reconnect 1: the socket will wait 'recon_default' milliseconds
#            reconnect 2: 'recon_default' * 2
#            reconnect 3: ('recon_default' * 2) * 2
#            reconnect 4: value from previous interval * 2
#            reconnect 5: value from previous interval * 2
#            reconnect x: if value >= recon_max, it starts again with recon_default
#
# recon_randomize: generate a random wait time on minion start. The wait time will
#                  be a random value between recon_default and recon_default +
#                  recon_max. Having all minions reconnect with the same recon_default
#                  and recon_max value kind of defeats the purpose of being able to
#                  change these settings. If all minions have the same values and your
#                  setup is quite large (several thousand minions), they will still
#                  flood the master. The desired behavior is to have timeframe within
#                  all minions try to reconnect.
#
# Example on how to use these settings. The goal: have all minions reconnect within a
# 60 second timeframe on a disconnect.
# recon_default: 1000
# recon_max: 59000
# recon_randomize: True
#
# Each minion will have a randomized reconnect value between 'recon_default'
# and 'recon_default + recon_max', which in this example means between 1000ms
# 60000ms (or between 1 and 60 seconds). The generated random-value will be
# doubled after each attempt to reconnect. Lets say the generated random
# value is 11 seconds (or 11000ms).
# reconnect 1: wait 11 seconds
# reconnect 2: wait 22 seconds
# reconnect 3: wait 33 seconds
# reconnect 4: wait 44 seconds
# reconnect 5: wait 55 seconds
# reconnect 6: wait time is bigger than 60 seconds (recon_default + recon_max)
# reconnect 7: wait 11 seconds
# reconnect 8: wait 22 seconds
# reconnect 9: wait 33 seconds
# reconnect x: etc.
#
# In a setup with ~6000 thousand hosts these settings would average the reconnects
# to about 100 per second and all hosts would be reconnected within 60 seconds.
# recon_default: 100
# recon_max: 5000
# recon_randomize: False
<% if @minion_recon_default %>
recon_default: <%= @minion_recon_default %>
<% end %>
<% if @minion_recon_max %>
recon_max: <%= @minion_recon_max %>
<% end %>
<% if @minion_recon_randomize %>
recon_randomize: <%= @minion_recon_randomize %>
<% end %>
#
#
# The loop_interval sets how long in seconds the minion will wait between
# evaluating the scheduler and running cleanup tasks. This defaults to a
# sane 60 seconds, but if the minion scheduler needs to be evaluated more
# often lower this value
#loop_interval: 60
<% if @minion_loop_interval %>
loop_interval: <%= @minion_loop_interval %>
<% end %>

# The grains_refresh_every setting allows for a minion to periodically check
# its grains to see if they have changed and, if so, to inform the master
# of the new grains. This operation is moderately expensive, therefore
# care should be taken not to set this value too low.
#
# Note: This value is expressed in __minutes__!
#
# A value of 10 minutes is a reasonable default.
#
# If the value is set to zero, this check is disabled.
#grains_refresh_every: 1
<% if @minion_grains_refresh_every %>
grains_refresh_every: <%= @minion_grains_refresh_every %>
<% end %>

# Cache grains on the minion. Default is False.
#grains_cache: False
<% if @minion_grains_cache %>
grains_cache: <%= @minion_grains_cache %>
<% end %>

# Grains cache expiration, in seconds. If the cache file is older than this
# number of seconds then the grains cache will be dumped and fully re-populated
# with fresh data. Defaults to 5 minutes. Will have no effect if 'grains_cache'
# is not enabled.
# grains_cache_expiration: 300
<% if @minion_grains_cache_expiration %>
grains_cache_expiration: <%= @minion_grains_cache_expiration %>
<% end %>

# Windows platforms lack posix IPC and must rely on slower TCP based inter-
# process communications. Set ipc_mode to 'tcp' on such systems
#ipc_mode: ipc
<% if @minion_ipc_mode %>
ipc_mode: <%= @minion_ipc_mode %>
<% end %>

# Overwrite the default tcp ports used by the minion when in tcp mode
#tcp_pub_port: 4510
#tcp_pull_port: 4511
<% if @minion_tcp_pub_port %>
tcp_pub_port: <%= @minion_tcp_pub_port %>
<% end %>
<% if @minion_tcp_pull_port %>
tcp_pull_port: <%= @minion_tcp_pull_port %>
<% end %>

# Passing very large events can cause the minion to consume large amounts of
# memory. This value tunes the maximum size of a message allowed onto the
# minion event bus. The value is expressed in bytes.
#max_event_size: 1048576
<% if @minion_max_event_size %>
max_event_size: <%= @minion_max_event_size %>
<% end %>

# To detect failed master(s) and fire events on connect/disconnect, set
# master_alive_interval to the number of seconds to poll the masters for
# connection events.
#
#master_alive_interval: 30

# The minion can include configuration from other files. To enable this,
# pass a list of paths to this option. The paths can be either relative or
# absolute; if relative, they are considered to be relative to the directory
# the main minion configuration file lives in (this file). Paths can make use
# of shell-style globbing. If no files are matched by a path passed to this
# option then the minion will log a warning message.
#
# Include a config file from some other path:
# include: /etc/salt/extra_config
#
# Include config from several files and directories:
#include:
#  - /etc/salt/extra_config
#  - /etc/roles/webserver
#
#
#
#####   Minion module management     #####
##########################################
# Disable specific modules. This allows the admin to limit the level of
# access the master has to the minion.
#disable_modules: [cmd,test]
#disable_returners: []
<% if @minion_disable_modules %>
disable_modules: <%= @minion_disable_modules %>
<% end %>
<% if @minion_disable_returners %>
disable_returners: <%= @minion_disable_returners %>
<% end %>
#
# Modules can be loaded from arbitrary paths. This enables the easy deployment
# of third party modules. Modules for returners and minions can be loaded.
# Specify a list of extra directories to search for minion modules and
# returners. These paths must be fully qualified!
#module_dirs: []
#returner_dirs: []
#states_dirs: []
#render_dirs: []
#utils_dirs: []
<% if @minion_module_dirs %>
module_dirs: <%= @minion_module_dirs %>
<% end %>
<% if @minion_returner_dirs %>
returner_dirs: <%= @minion_returner_dirs %>
<% end %>
<% if @minion_states_dirs %>
states_dirs: <%= @minion_states_dirs %>
<% end %>
<% if @minion_render_dirs %>
render_dirs: <%= @minion_render_dirs %>
<% end %>
<% if @minion_utils_dirs %>
utils_dirs: <%= @minion_utils_dirs %>
<% end %>
#
# A module provider can be statically overwritten or extended for the minion
# via the providers option, in this case the default module will be
# overwritten by the specified module. In this example the pkg module will
# be provided by the yumpkg5 module instead of the system default.
#providers:
#  pkg: yumpkg5
<% if @minion_providers %>
providers: <%= @minion_providers %>
<% end %>
#
# Enable Cython modules searching and loading. (Default: False)
#cython_enable: False
<% if @minion_cython_enable %>
cython_enable: <%= @minion_cython_enable %>
<% end %>
#
# Specify a max size (in bytes) for modules on import. This feature is currently
# only supported on *nix operating systems and requires psutil.
# modules_max_memory: -1
<% if @minion_modules_max_memory %>
modules_max_memory: <%= @minion_modules_max_memory %>
<% end %>

#####    State Management Settings    #####
###########################################
# The state management system executes all of the state templates on the minion
# to enable more granular control of system state management. The type of
# template and serialization used for state management needs to be configured
# on the minion, the default renderer is yaml_jinja. This is a yaml file
# rendered from a jinja template, the available options are:
# yaml_jinja
# yaml_mako
# yaml_wempy
# json_jinja
# json_mako
# json_wempy
#
#renderer: yaml_jinja
<% if @minion_renderer %>
renderer: <%= @minion_renderer %>
<% end %>
#
# The failhard option tells the minions to stop immediately after the first
# failure detected in the state execution. Defaults to False.
#failhard: False
<% if @minion_failhard %>
failhard: <%= @minion_failhard %>
<% end %>
#
# Reload the modules prior to a highstate run.
#autoload_dynamic_modules: True
<% if @minion_autoload_dynamic_modules %>
autoload_dynamic_modules: <%= @minion_autoload_dynamic_modules %>
<% end %>
#
# clean_dynamic_modules keeps the dynamic modules on the minion in sync with
# the dynamic modules on the master, this means that if a dynamic module is
# not on the master it will be deleted from the minion. By default, this is
# enabled and can be disabled by changing this value to False.
#clean_dynamic_modules: True
<% if @minion_clean_dynamic_modules %>
clean_dynamic_modules: <%= @minion_clean_dynamic_modules %>
<% end %>
#
# Normally, the minion is not isolated to any single environment on the master
# when running states, but the environment can be isolated on the minion side
# by statically setting it. Remember that the recommended way to manage
# environments is to isolate via the top file.
#environment: None
<% if @minion_environment %>
environment: <%= @minion_environment %>
<% end %>
#
# If using the local file directory, then the state top file name needs to be
# defined, by default this is top.sls.
#state_top: top.sls
<% if @minion_state_top %>
state_top: <%= @minion_state_top %>
<% end %>
#
# Run states when the minion daemon starts. To enable, set startup_states to:
# 'highstate' -- Execute state.highstate
# 'sls' -- Read in the sls_list option and execute the named sls files
# 'top' -- Read top_file option and execute based on that file on the Master
#startup_states: ''
<% if @minion_startup_states %>
startup_states: <%= @minion_startup_states %>
<% end %>
#
# List of states to run when the minion starts up if startup_states is 'sls':
#sls_list:
#  - edit.vim
#  - hyper
#
# Top file to execute if startup_states is 'top':
#top_file: ''
<% if @minion_top_file %>
top_file: <%= @minion_top_file %>
<% end %>

# Automatically aggregate all states that have support for mod_aggregate by
# setting to True. Or pass a list of state module names to automatically
# aggregate just those types.
#
# state_aggregate:
#   - pkg
#
#state_aggregate: False
<% if @minion_state_aggregate %>
state_aggregate: <%= @minion_state_aggregate %>
<% end %>

#####     File Directory Settings    #####
##########################################
# The Salt Minion can redirect all file server operations to a local directory,
# this allows for the same state tree that is on the master to be used if
# copied completely onto the minion. This is a literal copy of the settings on
# the master but used to reference a local directory on the minion.

# Set the file client. The client defaults to looking on the master server for
# files, but can be directed to look at the local file directory setting
# defined below by setting it to "local". Setting a local file_client runs the
# minion in masterless mode.
#file_client: remote
<% if @minion_file_client %>
file_client: <%= @minion_file_client %>
<% end %>

# The file directory works on environments passed to the minion, each environment
# can have multiple root directories, the subdirectories in the multiple file
# roots cannot match, otherwise the downloaded files will not be able to be
# reliably ensured. A base environment is required to house the top file.
# Example:
# file_roots:
#   base:
#     - /srv/salt/
#   dev:
#     - /srv/salt/dev/services
#     - /srv/salt/dev/states
#   prod:
#     - /srv/salt/prod/services
#     - /srv/salt/prod/states
#
#file_roots:
#  base:
#    - /srv/salt
<% if @minion_file_roots %>
file_roots: <%= @minion_file_roots %>
<% end %>

# By default, the Salt fileserver recurses fully into all defined environments
# to attempt to find files. To limit this behavior so that the fileserver only
# traverses directories with SLS files and special Salt directories like _modules,
# enable the option below. This might be useful for installations where a file root
# has a very large number of files and performance is negatively impacted. Default
# is False.
#fileserver_limit_traversal: False
<% if @minion_fileserver_limit_traversal %>
fileserver_limit_traversal: <%= @minion_fileserver_limit_traversal %>
<% end %>

# The hash_type is the hash to use when discovering the hash of a file in
# the local fileserver. The default is md5, but sha1, sha224, sha256, sha384
# and sha512 are also supported.
#
# Warning: Prior to changing this value, the minion should be stopped and all
# Salt caches should be cleared.
#hash_type: md5
<% if @minion_hash_type %>
hash_type: <%= @minion_hash_type %>
<% end %>

# The Salt pillar is searched for locally if file_client is set to local. If
# this is the case, and pillar data is defined, then the pillar_roots need to
# also be configured on the minion:
#pillar_roots:
#  base:
#    - /srv/pillar
#
#
<% if @minion_pillar_roots %>
pillar_roots: <%= @minion_pillar_roots %>
<% end %>

######        Security settings       #####
###########################################
# Enable "open mode", this mode still maintains encryption, but turns off
# authentication, this is only intended for highly secure environments or for
# the situation where your keys end up in a bad state. If you run in open mode
# you do so at your own risk!
#open_mode: False
<% if @minion_open_mode %>
open_mode: <%= @minion_open_mode %>
<% end %>

# Enable permissive access to the salt keys.  This allows you to run the
# master or minion as root, but have a non-root group be given access to
# your pki_dir.  To make the access explicit, root must belong to the group
# you've given access to. This is potentially quite insecure.
#permissive_pki_access: False
<% if @minion_permissive_pki_access %>
permissive_pki_access: <%= @minion_permissive_pki_access %>
<% end %>

# The state_verbose and state_output settings can be used to change the way
# state system data is printed to the display. By default all data is printed.
# The state_verbose setting can be set to True or False, when set to False
# all data that has a result of True and no changes will be suppressed.
#state_verbose: True
<% if @minion_state_verbose %>
state_verbose: <%= @minion_state_verbose %>
<% end %>

# The state_output setting changes if the output is the full multi line
# output for each changed state if set to 'full', but if set to 'terse'
# the output will be shortened to a single line.
#state_output: full
<% if @minion_state_output %>
state_output: <%= @minion_state_output %>
<% end %>

# The state_output_diff setting changes whether or not the output from
# successful states is returned. Useful when even the terse output of these
# states is cluttering the logs. Set it to True to ignore them.
#state_output_diff: False
<% if @minion_state_output_diff %>
state_output_diff: <%= @minion_state_output_diff %>
<% end %>

# The state_output_profile setting changes whether profile information
# will be shown for each state run.
#state_output_profile: True
<% if @minion_state_output_profile %>
state_output_profile: <%= @minion_state_output_profile %>
<% end %>

# Fingerprint of the master public key to validate the identity of your Salt master
# before the initial key exchange. The master fingerprint can be found by running
# "salt-key -F master" on the Salt master.
#master_finger: ''
<% if @minion_master_finger %>
master_finger: <%= @minion_master_finger %>
<% end %>


######         Thread settings        #####
###########################################
# Disable multiprocessing support, by default when a minion receives a
# publication a new process is spawned and the command is executed therein.
#multiprocessing: True
<% if @minion_multiprocessing %>
multiprocessing: <%= @minion_multiprocessing %>
<% end %>

#####         Logging settings       #####
##########################################
# The location of the minion log file
# The minion log can be sent to a regular file, local path name, or network
# location. Remote logging works best when configured to use rsyslogd(8) (e.g.:
# ``file:///dev/log``), with rsyslogd(8) configured for network logging. The URI
# format is: <file|udp|tcp>://<host|socketpath>:<port-if-required>/<log-facility>
#log_file: /var/log/salt/minion
#log_file: file:///dev/log
#log_file: udp://loghost:10514
#
#log_file: /var/log/salt/minion
#key_logfile: /var/log/salt/key
<% if @minion_log_file %>
log_file: <%= @minion_log_file %>
<% end %>
<% if @minion_key_logfile %>
key_logfile: <%= @minion_key_logfile %>
<% end %>

# The level of messages to send to the console.
# One of 'garbage', 'trace', 'debug', info', 'warning', 'error', 'critical'.
#
# The following log levels are considered INSECURE and may log sensitive data:
# ['garbage', 'trace', 'debug']
#
# Default: 'warning'
#log_level: warning
<% if @minion_log_level %>
log_level: <%= @minion_log_level %>
<% end %>

# The level of messages to send to the log file.
# One of 'garbage', 'trace', 'debug', info', 'warning', 'error', 'critical'.
# If using 'log_granular_levels' this must be set to the highest desired level.
# Default: 'warning'
#log_level_logfile:
<% if @minion_log_level_logfile %>
log_level_logfile: <%= @minion_log_level_logfile %>
<% end %>

# The date and time format used in log messages. Allowed date/time formating
# can be seen here: http://docs.python.org/library/time.html#time.strftime
#log_datefmt: '%H:%M:%S'
#log_datefmt_logfile: '%Y-%m-%d %H:%M:%S'
<% if @minion_log_datefmt %>
log_datefmt: '<%= @minion_log_datefmt %>'
<% end %>
<% if @minion_log_datefmt_logfile %>
log_datefmt_logfile: '<%= @minion_log_datefmt_logfile %>'
<% end %>

# The format of the console logging messages. Allowed formatting options can
# be seen here: http://docs.python.org/library/logging.html#logrecord-attributes
#
# Console log colors are specified by these additional formatters:
#
# %(colorlevel)s
# %(colorname)s
# %(colorprocess)s
# %(colormsg)s
#
# Since it is desirable to include the surrounding brackets, '[' and ']', in
# the coloring of the messages, these color formatters also include padding as
# well.  Color LogRecord attributes are only available for console logging.
#
#log_fmt_console: '%(colorlevel)s %(colormsg)s'
#log_fmt_console: '[%(levelname)-8s] %(message)s'
#
#log_fmt_logfile: '%(asctime)s,%(msecs)03.0f [%(name)-17s][%(levelname)-8s] %(message)s'
<% if @minion_log_fmt_logfile %>
log_fmt_logfile: '<%= @minion_log_fmt_logfile %>'
<% end %>

# This can be used to control logging levels more specificically.  This
# example sets the main salt library at the 'warning' level, but sets
# 'salt.modules' to log at the 'debug' level:
#   log_granular_levels:
#     'salt': 'warning'
#     'salt.modules': 'debug'
#
#log_granular_levels: {}
<% if @minion_log_granular_levels %>
log_granular_levels: <%= @minion_log_granular_levels %>
<% end %>

# To diagnose issues with minions disconnecting or missing returns, ZeroMQ
# supports the use of monitor sockets # to log connection events. This
# feature requires ZeroMQ 4.0 or higher.
#
# To enable ZeroMQ monitor sockets, set 'zmq_monitor' to 'True' and log at a
# debug level or higher.
#
# A sample log event is as follows:
#
# [DEBUG   ] ZeroMQ event: {'endpoint': 'tcp://127.0.0.1:4505', 'event': 512,
# 'value': 27, 'description': 'EVENT_DISCONNECTED'}
#
# All events logged will include the string 'ZeroMQ event'. A connection event
# should be logged on the as the minion starts up and initially connects to the
# master. If not, check for debug log level and that the necessary version of
# ZeroMQ is installed.
#
#zmq_monitor: False
<% if @minion_zmq_monitor %>
zmq_monitor: <%= @minion_zmq_monitor %>
<% end %>

######      Module configuration      #####
###########################################
# Salt allows for modules to be passed arbitrary configuration data, any data
# passed here in valid yaml format will be passed on to the salt minion modules
# for use. It is STRONGLY recommended that a naming convention be used in which
# the module name is followed by a . and then the value. Also, all top level
# data must be applied via the yaml dict construct, some examples:
#
# You can specify that all modules should run in test mode:
#test: True
<% if @minion_test %>
test: <%= @minion_test %>
<% end %>
#
# A simple value for the test module:
#test.foo: foo
#
# A list for the test module:
#test.bar: [baz,quo]
#
# A dict for the test module:
#test.baz: {spam: sausage, cheese: bread}
#
#
######      Update settings          ######
###########################################
# Using the features in Esky, a salt minion can both run as a frozen app and
# be updated on the fly. These options control how the update process
# (saltutil.update()) behaves.
#
# The url for finding and downloading updates. Disabled by default.
#update_url: False
<% if @minion_update_url %>
update_url: <%= @minion_update_url %>
<% end %>
#
# The list of services to restart after a successful update. Empty by default.
#update_restart_services: []
<% if @minion_update_restart_services %>
update_restart_services: <%= @minion_update_restart_services %>
<% end %>

######      Keepalive settings        ######
############################################
# ZeroMQ now includes support for configuring SO_KEEPALIVE if supported by
# the OS. If connections between the minion and the master pass through
# a state tracking device such as a firewall or VPN gateway, there is
# the risk that it could tear down the connection the master and minion
# without informing either party that their connection has been taken away.
# Enabling TCP Keepalives prevents this from happening.

# Overall state of TCP Keepalives, enable (1 or True), disable (0 or False)
# or leave to the OS defaults (-1), on Linux, typically disabled. Default True, enabled.
#tcp_keepalive: True
<% if @minion_tcp_keepalive %>
tcp_keepalive: <%= @minion_tcp_keepalive %>
<% end %>

# How long before the first keepalive should be sent in seconds. Default 300
# to send the first keepalive after 5 minutes, OS default (-1) is typically 7200 seconds
# on Linux see /proc/sys/net/ipv4/tcp_keepalive_time.
#tcp_keepalive_idle: 300
<% if @minion_tcp_keepalive_idle %>
tcp_keepalive_idle: <%= @minion_tcp_keepalive_idle %>
<% end %>

# How many lost probes are needed to consider the connection lost. Default -1
# to use OS defaults, typically 9 on Linux, see /proc/sys/net/ipv4/tcp_keepalive_probes.
#tcp_keepalive_cnt: -1
<% if @minion_tcp_keepalive_cnt %>
tcp_keepalive_cnt: <%= @minion_tcp_keepalive_cnt %>
<% end %>

# How often, in seconds, to send keepalives after the first one. Default -1 to
# use OS defaults, typically 75 seconds on Linux, see
# /proc/sys/net/ipv4/tcp_keepalive_intvl.
#tcp_keepalive_intvl: -1
<% if @minion_tcp_keepalive_intvl %>
tcp_keepalive_intvl: <%= @minion_tcp_keepalive_intvl %>
<% end %>

######   Windows Software settings    ######
############################################
# Location of the repository cache file on the master:
#win_repo_cachefile: 'salt://win/repo/winrepo.p'


######      Returner  settings        ######
############################################
# Which returner(s) will be used for minion's result:
#return: mysql
